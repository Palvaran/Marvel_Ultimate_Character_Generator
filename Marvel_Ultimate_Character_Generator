#Subject:  Marvel Super Heroes Player's Book Character Generator
#Author:   Palvaran
#Website:  ideasquantified.com
#Inspiration:  https://en.wikipedia.org/wiki/Marvel_Super_Heroes_(role-playing_game)

import random, time

initial_ranks = ['Feeble', 'Poor', 'Typical', 'Good', 'Excellent', 'Remarkable', 'Incredible', 'Amazing', 'Monstrous', 'Unearthly']
char_stats = []
char_power_class = []
power = []
character_powers = []
character_power_levels = []
character_bonuses = []
character_weaknesses = []
talent = []
character_talents = []

#Generating Physical Form
physical_form_outcomes = {}
for i in range(1, 26):
    physical_form_outcomes[i] = 'Normal Human'
for i in range(26, 31):
    physical_form_outcomes[i] = 'Mutant - Induced'
for i in range(31, 34):
    physical_form_outcomes[i] = 'Mutant - Random'
for i in range(34, 36):
    physical_form_outcomes[i] = 'Mutant - Breed'
for i in range(36, 39):
    physical_form_outcomes[i] = 'Android'
for i in range(39, 47):
    physical_form_outcomes[i] = 'Humanoid Race'
for i in range(47, 48):
    physical_form_outcomes[i] = 'Surgical Composite'
for i in range(48, 50):
    physical_form_outcomes[i] = 'Modified Human - Organic'
for i in range(50, 52):
    physical_form_outcomes[i] = 'Modified Human - Muscular'
for i in range(52, 54):
    physical_form_outcomes[i] = 'Modified Human - Skeletal'
for i in range(54, 58):
    physical_form_outcomes[i] = 'Modified Human - Extra Parts'
for i in range(58, 59):
    physical_form_outcomes[i] = 'Demihuman - Centaur'
for i in range(59, 60):
    physical_form_outcomes[i] = 'Demihuman - Equiman'
for i in range(60, 61):
    physical_form_outcomes[i] = 'Demihuman - Faun'
for i in range(61, 63):
    physical_form_outcomes[i] = 'Demihuman - Felinoid'
for i in range(63, 65):
    physical_form_outcomes[i] = 'Demihuman - Lupinoid'
for i in range(65, 67):
    physical_form_outcomes[i] = 'Demihuman - Avian'
for i in range(67, 68):
    physical_form_outcomes[i] = 'Demihuman - Chiropteran'
for i in range(68, 69):
    physical_form_outcomes[i] = 'Demihuman - Lamian'
for i in range(69, 70):
    physical_form_outcomes[i] = 'Demihuman - Merhuman'
for i in range(70, 71):
    physical_form_outcomes[i] = 'Demihuman - Other'
for i in range(71, 73):
    physical_form_outcomes[i] = 'Cyborg - Artifical Limbs and Organs'
for i in range(73, 75):
    physical_form_outcomes[i] = 'Cyborg - Exoskeleton'
for i in range(75, 77):
    physical_form_outcomes[i] = 'Cyborg - Mechanical Body'
for i in range(77, 80):
    physical_form_outcomes[i] = 'Cyborg - Mechanically Augmented'
for i in range(80, 83):
    physical_form_outcomes[i] = 'Robot - Human Shape'
for i in range(83, 85):
    physical_form_outcomes[i] = 'Robot - Usuform'
for i in range(85, 87):
    physical_form_outcomes[i] = 'Robot - Metamorphic'
for i in range(87, 88):
    physical_form_outcomes[i] = 'Robot - Computer'
for i in range(88, 89):
    physical_form_outcomes[i] = 'Angel or Demon'
for i in range(89, 90):
    physical_form_outcomes[i] = 'Deity'
for i in range(90, 91):
    physical_form_outcomes[i] = 'Animal'
for i in range(91, 92):
    physical_form_outcomes[i] = 'Vegetable'
for i in range(92, 93):
    physical_form_outcomes[i] = 'Abnormal Chemistry'
for i in range(93, 94):
    physical_form_outcomes[i] = 'Mineral'
for i in range(94, 95):
    physical_form_outcomes[i] = 'Gaseous'
for i in range(95, 96):
    physical_form_outcomes[i] = 'Liquid'
for i in range(96, 97):
    physical_form_outcomes[i] = 'Energy'
for i in range(97, 98):
    physical_form_outcomes[i] = 'Ethereal'
for i in range(98, 99):
    physical_form_outcomes[i] = 'Undead'
for i in range(99, 100):
    physical_form_outcomes[i] = 'Compound'
for i in range(100, 101):
    physical_form_outcomes[i] = 'Changeling'

#Generating Origins
origin_outcomes = {}
for i in range(1, 11):
    origin_outcomes[i] = 'Natal'
for i in range(11, 21):
    origin_outcomes[i] = 'Maturity'
for i in range(21, 31):
    origin_outcomes[i] = 'Self-Achievement'
for i in range(31, 36):
    origin_outcomes[i] = 'Endowment'
for i in range(36, 51):
    origin_outcomes[i] = 'Technical Mishap'
for i in range(51, 61):
    origin_outcomes[i] = 'Technical Procedure'
for i in range(61, 66):
    origin_outcomes[i] = 'Creation'
for i in range(66, 77):
    origin_outcomes[i] = 'Biological Exposure'
for i in range(77, 88):
    origin_outcomes[i] = 'Chemical Exposure'
for i in range(88, 99):
    origin_outcomes[i] = 'Energy Exposure'
for i in range(99, 101):
    origin_outcomes[i] = 'Rebirth'

#Generating Weakness - Stimulus
weakness_stimulus_outcomes = {}
for i in range(1, 14):
    weakness_stimulus_outcomes[i] = 'Psychological'
for i in range(14, 19):
    weakness_stimulus_outcomes[i] = 'Elemental Allergy'
for i in range(19, 44):
    weakness_stimulus_outcomes[i] = 'Molecular Allergy'
for i in range(44, 69):
    weakness_stimulus_outcomes[i] = 'Energy Allergy'
for i in range(69, 82):
    weakness_stimulus_outcomes[i] = 'Energy Depletion'
for i in range(82, 95):
    weakness_stimulus_outcomes[i] = 'Energy Dampening'
for i in range(95, 101):
    weakness_stimulus_outcomes[i] = 'Finite Limit'

#Generating Weakness - Effect
weakness_effect_outcomes = {}
for i in range(1, 51):
    weakness_effect_outcomes[i] = 'Power Negation'
for i in range(51, 91):
    weakness_effect_outcomes[i] = 'Incapacitation'
for i in range(91, 101):
    weakness_effect_outcomes[i] = 'Fatal'

#Generating Weakness - Duration
weakness_duration_outcomes = {}
for i in range(1, 41):
    weakness_duration_outcomes[i] = 'Continuous with Contact'
for i in range(41, 61):
    weakness_duration_outcomes[i] = 'Limited Duration with Contact'
for i in range(61, 91):
    weakness_duration_outcomes[i] = 'Limited Duration after Contact'
for i in range(91, 101):
    weakness_duration_outcomes[i] = 'Permanent'

#Powers counter
powers_outcomes = {}
for i in range(1, 13):
    powers_outcomes[i] = 1
for i in range(13, 27):
    powers_outcomes[i] = 2
for i in range(27, 42):
    powers_outcomes[i] = 3
for i in range(42, 56):
    powers_outcomes[i] = 4
for i in range(56, 67):
    powers_outcomes[i] = 5
for i in range(67, 76):
    powers_outcomes[i] = 6
for i in range(76, 84):
    powers_outcomes[i] = 7
for i in range(84, 90):
    powers_outcomes[i] = 8
for i in range(90, 95):
    powers_outcomes[i] = 9
for i in range(95, 98):
    powers_outcomes[i] = 10
for i in range(98, 100):
    powers_outcomes[i] = 12
for i in range(100, 101):
    powers_outcomes[i] = 14

#Talents counter
talents_outcomes = {}
for i in range(1, 13):
    talents_outcomes[i] = 0
for i in range(13, 27):
    talents_outcomes[i] = 1
for i in range(27, 42):
    talents_outcomes[i] = 1
for i in range(42, 56):
    talents_outcomes[i] = 2
for i in range(56, 67):
    talents_outcomes[i] = 2
for i in range(67, 76):
    talents_outcomes[i] = 2
for i in range(76, 84):
    talents_outcomes[i] = 3
for i in range(84, 90):
    talents_outcomes[i] = 3
for i in range(90, 95):
    talents_outcomes[i] = 4
for i in range(95, 98):
    talents_outcomes[i] = 4
for i in range(98, 100):
    talents_outcomes[i] = 5
for i in range(100, 101):
    talents_outcomes[i] = 6

#Contacts counter
contacts_outcomes = {}
for i in range(1, 13):
    contacts_outcomes[i] = 0
for i in range(13, 27):
    contacts_outcomes[i] = 0
for i in range(27, 42):
    contacts_outcomes[i] = 1
for i in range(42, 56):
    contacts_outcomes[i] = 2
for i in range(56, 67):
    contacts_outcomes[i] = 2
for i in range(67, 76):
    contacts_outcomes[i] = 3
for i in range(76, 84):
    contacts_outcomes[i] = 3
for i in range(84, 90):
    contacts_outcomes[i] = 3
for i in range(90, 95):
    contacts_outcomes[i] = 4
for i in range(95, 98):
    contacts_outcomes[i] = 4
for i in range(98, 100):
    contacts_outcomes[i] = 5
for i in range(100, 101):
    contacts_outcomes[i] = 6

#Generating FASERIP_Rank1 (Altered Humans and Mutants)
faserip_rank1_outcomes = {}
for i in range(1, 6):
    faserip_rank1_outcomes[i] = 'Feeble'
for i in range(6, 11):
    faserip_rank1_outcomes[i] = 'Poor'
for i in range(11, 21):
    faserip_rank1_outcomes[i] = 'Typical'
for i in range(21, 41):
    faserip_rank1_outcomes[i] = 'Good'
for i in range(41, 61):
    faserip_rank1_outcomes[i] = 'Excellent'
for i in range(61, 81):
    faserip_rank1_outcomes[i] = 'Remarkable'
for i in range(81, 97):
    faserip_rank1_outcomes[i] = 'Incredible'
for i in range(97, 101):
    faserip_rank1_outcomes[i] = 'Amazing'

#Generating FASERIP_Rank2 (Normal Folk)
faserip_rank2_outcomes = {}
for i in range(1, 6):
    faserip_rank2_outcomes[i] = 'Feeble'
for i in range(6, 26):
    faserip_rank2_outcomes[i] = 'Poor'
for i in range(26, 76):
    faserip_rank2_outcomes[i] = 'Typical'
for i in range(76, 96):
    faserip_rank2_outcomes[i] = 'Good'
for i in range(96, 101):
    faserip_rank2_outcomes[i] = 'Excellent'

#Generating FASERIP_Rank3 (High Technology)
faserip_rank3_outcomes = {}
for i in range(1, 6):
    faserip_rank3_outcomes[i] = 'Feeble'
for i in range(6, 11):
    faserip_rank3_outcomes[i] = 'Poor'
for i in range(11, 41):
    faserip_rank3_outcomes[i] = 'Typical'
for i in range(41, 81):
    faserip_rank3_outcomes[i] = 'Good'
for i in range(81, 96):
    faserip_rank3_outcomes[i] = 'Excellent'
for i in range(96, 101):
    faserip_rank3_outcomes[i] = 'Remarkable'

#Generating FASERIP_Rank4 (Robots)
faserip_rank4_outcomes = {}
for i in range(1, 6):
    faserip_rank4_outcomes[i] = 'Feeble'
for i in range(6, 11):
    faserip_rank4_outcomes[i] = 'Poor'
for i in range(11, 16):
    faserip_rank4_outcomes[i] = 'Typical'
for i in range(16, 41):
    faserip_rank4_outcomes[i] = 'Good'
for i in range(41, 51):
    faserip_rank4_outcomes[i] = 'Excellent'
for i in range(51, 71):
    faserip_rank4_outcomes[i] = 'Remarkable'
for i in range(71, 91):
    faserip_rank4_outcomes[i] = 'Incredible'
for i in range(91, 99):
    faserip_rank4_outcomes[i] = 'Amazing'
for i in range(91, 101):
    faserip_rank4_outcomes[i] = 'Monstrous'

#Generating FASERIP_Rank5 (Aliens)
faserip_rank5_outcomes = {}
for i in range(1, 11):
    faserip_rank5_outcomes[i] = 'Feeble'
for i in range(11, 21):
    faserip_rank5_outcomes[i] = 'Poor'
for i in range(21, 31):
    faserip_rank5_outcomes[i] = 'Typical'
for i in range(31, 41):
    faserip_rank5_outcomes[i] = 'Good'
for i in range(41, 61):
    faserip_rank5_outcomes[i] = 'Excellent'
for i in range(61, 71):
    faserip_rank5_outcomes[i] = 'Remarkable'
for i in range(71, 81):
    faserip_rank5_outcomes[i] = 'Incredible'
for i in range(81, 96):
    faserip_rank5_outcomes[i] = 'Amazing'
for i in range(96, 101):
    faserip_rank5_outcomes[i] = 'Monstrous'

#Generating Power Class
power_class_outcomes = {}
for i in range(1, 6):
    power_class_outcomes[i] = 'Defensive'
for i in range(6, 12):
    power_class_outcomes[i] = 'Detection'
for i in range(12, 17):
    power_class_outcomes[i] = 'Energy Control'
for i in range(17, 25):
    power_class_outcomes[i] = 'Energy Emission'
for i in range(25, 30):
    power_class_outcomes[i] = 'Fighting'
for i in range(30, 32):
    power_class_outcomes[i] = 'Illusionary'
for i in range(32, 36):
    power_class_outcomes[i] = 'Lifeform Control'
for i in range(36, 41):
    power_class_outcomes[i] = 'Magic'
for i in range(41, 48):
    power_class_outcomes[i] = 'Matter Control'
for i in range(48, 54):
    power_class_outcomes[i] = 'Matter Conversion'
for i in range(54, 58):
    power_class_outcomes[i] = 'Matter Creation'
for i in range(58, 72):
    power_class_outcomes[i] = 'Mental Enhancement'
for i in range(72, 86):
    power_class_outcomes[i] = 'Physical Enhancement'
for i in range(86, 89):
    power_class_outcomes[i] = 'Power Control'
for i in range(89, 93):
    power_class_outcomes[i] = 'Self-Alteration'
for i in range(93, 101):
    power_class_outcomes[i] = 'Travel'

#Generating Power Category (Defensive Power)
power_category_defensive_outcomes = {}
for i in range(1, 16):
    power_category_defensive_outcomes[i] = 'Body Armor'
for i in range(16, 21):
    power_category_defensive_outcomes[i] = 'Force Field'
for i in range(21, 24):
    power_category_defensive_outcomes[i] = 'Force Field vs Emotion'
for i in range(24, 31):
    power_category_defensive_outcomes[i] = 'Force Field vs Energy'
for i in range(31, 36):
    power_category_defensive_outcomes[i] = 'Force Field vs Magic'
for i in range(36, 41):
    power_category_defensive_outcomes[i] = 'Force Field vs Mental'
for i in range(41, 49):
    power_category_defensive_outcomes[i] = 'Force Field vs Physical'
for i in range(49, 51):
    power_category_defensive_outcomes[i] = 'Force Field vs Power Manipulation'
for i in range(51, 54):
    power_category_defensive_outcomes[i] = 'Force Field vs Vampirism'
for i in range(54, 66):
    power_category_defensive_outcomes[i] = 'Reflection'
for i in range(66, 71):
    power_category_defensive_outcomes[i] = 'Resist: Emotion'
for i in range(71, 78):
    power_category_defensive_outcomes[i] = 'Resist: Energy'
for i in range(78, 83):
    power_category_defensive_outcomes[i] = 'Resist: Magic'
for i in range(83, 88):
    power_category_defensive_outcomes[i] = 'Resist: Mental'
for i in range(88, 95):
    power_category_defensive_outcomes[i] = 'Resist: Physical'
for i in range(95, 98):
    power_category_defensive_outcomes[i] = 'Resist: Power Manipulation'
for i in range(98, 101):
    power_category_defensive_outcomes[i] = 'Resist: Vampirism'

#Generating Power Category (Detection Power)
power_category_detection_outcomes = {}
for i in range(1, 3):
    power_category_detection_outcomes[i] = 'Abnormal Sensitivity'
for i in range(3, 5):
    power_category_detection_outcomes[i] = 'Circular Vision'
for i in range(5, 11):
    power_category_detection_outcomes[i] = 'Energy Detection'
for i in range(11, 15):
    power_category_detection_outcomes[i] = 'Environmental Awareness'
for i in range(15, 21):
    power_category_detection_outcomes[i] = 'Extradimensional'
for i in range(21, 29):
    power_category_detection_outcomes[i] = 'Hyper-Hearing'
for i in range(29, 35):
    power_category_detection_outcomes[i] = 'Hyper-Olfactory'
for i in range(35, 41):
    power_category_detection_outcomes[i] = 'Hyper-Touch'
for i in range(41, 43):
    power_category_detection_outcomes[i] = 'Life Detection'
for i in range(43, 45):
    power_category_detection_outcomes[i] = 'Magic Detection'
for i in range(45, 51):
    power_category_detection_outcomes[i] = 'Microscopic Vision'
for i in range(51, 55):
    power_category_detection_outcomes[i] = 'Penetration Vision'
for i in range(55, 57):
    power_category_detection_outcomes[i] = 'Power Detection'
for i in range(57, 59):
    power_category_detection_outcomes[i] = 'Psionic Detection'
for i in range(59, 60):
    power_category_detection_outcomes[i] = 'Radarsense'
for i in range(60, 63):
    power_category_detection_outcomes[i] = 'Sonar'
for i in range(63, 70):
    power_category_detection_outcomes[i] = 'Telescopic Vision'
for i in range(70, 80):
    power_category_detection_outcomes[i] = 'Thermal Vision'
for i in range(80, 91):
    power_category_detection_outcomes[i] = 'Tracking'
for i in range(91, 95):
    power_category_detection_outcomes[i] = 'True Sight'
for i in range(95, 99):
    power_category_detection_outcomes[i] = 'UV Vision'
for i in range(99, 101):
    power_category_detection_outcomes[i] = 'Weakness Detection'

#Generating Power Category (Energy Control Power)
power_category_energy_control_outcomes = {}
for i in range(1, 8):
    power_category_energy_control_outcomes[i] = 'Absorption Power'
for i in range(8, 11):
    power_category_energy_control_outcomes[i] = 'Catalytic Control'
for i in range(11, 16):
    power_category_energy_control_outcomes[i] = 'Coldshaping'
for i in range(16, 19):
    power_category_energy_control_outcomes[i] = 'Darkforce Manipulation'
for i in range(19, 26):
    power_category_energy_control_outcomes[i] = 'Electrical Control'
for i in range(26, 29):
    power_category_energy_control_outcomes[i] = 'Energy Conversion'
for i in range(29, 32):
    power_category_energy_control_outcomes[i] = 'Energy Solidification'
for i in range(32, 37):
    power_category_energy_control_outcomes[i] = 'Energy Sponge'
for i in range(37, 39):
    power_category_energy_control_outcomes[i] = 'Energy Vampirism*'
for i in range(39, 46):
    power_category_energy_control_outcomes[i] = 'Fire Control'
for i in range(46, 50):
    power_category_energy_control_outcomes[i] = 'Gravity Manipulation'
for i in range(50, 54):
    power_category_energy_control_outcomes[i] = 'Hard Radiation Control'
for i in range(54, 60):
    power_category_energy_control_outcomes[i] = 'Kinetic Control'
for i in range(60, 67):
    power_category_energy_control_outcomes[i] = 'Light Control'
for i in range(67, 74):
    power_category_energy_control_outcomes[i] = 'Magnetic Manipulation'
for i in range(74, 78):
    power_category_energy_control_outcomes[i] = 'Plasma Control'
for i in range(78, 81):
    power_category_energy_control_outcomes[i] = 'Radiowave Control'
for i in range(81, 85):
    power_category_energy_control_outcomes[i] = 'Shadowshaping'
for i in range(85, 91):
    power_category_energy_control_outcomes[i] = 'Sound Manipulation'
for i in range(91, 98):
    power_category_energy_control_outcomes[i] = 'Thermal Control'
for i in range(98, 101):
    power_category_energy_control_outcomes[i] = 'Vibration Control'

#Generating Power Category (Energy Emission Power)
power_category_energy_emission_outcomes = {}
for i in range(1, 11):
    power_category_energy_emission_outcomes[i] = 'Cold Generation'
for i in range(11, 21):
    power_category_energy_emission_outcomes[i] = 'Electrical Generation'
for i in range(21, 23):
    power_category_energy_emission_outcomes[i] = 'Energy Doppelganger'
for i in range(23, 35):
    power_category_energy_emission_outcomes[i] = 'Fire Generation'
for i in range(35, 38):
    power_category_energy_emission_outcomes[i] = 'Hard Radiation'
for i in range(38, 43):
    power_category_energy_emission_outcomes[i] = 'Heat'
for i in range(43, 53):
    power_category_energy_emission_outcomes[i] = 'Kinetic Bolt'
for i in range(53, 63):
    power_category_energy_emission_outcomes[i] = 'Light Emission'
for i in range(63, 73):
    power_category_energy_emission_outcomes[i] = 'Magnetism'
for i in range(73, 76):
    power_category_energy_emission_outcomes[i] = 'Plasma Generation'
for i in range(76, 79):
    power_category_energy_emission_outcomes[i] = 'Radiowave Generation'
for i in range(79, 84):
    power_category_energy_emission_outcomes[i] = 'Shadowcasting'
for i in range(84, 94):
    power_category_energy_emission_outcomes[i] = 'Sonic Generation'
for i in range(94, 101):
    power_category_energy_emission_outcomes[i] = 'Vibration'

#Generating Power Category (Fighting Power)
power_category_fighting_outcomes = {}
for i in range(1, 21):
    power_category_fighting_outcomes[i] = 'Berserker'
for i in range(21, 61):
    power_category_fighting_outcomes[i] = 'Martial Supremacy'
for i in range(61, 76):
    power_category_fighting_outcomes[i] = 'Natural Weaponry'
for i in range(76, 81):
    power_category_fighting_outcomes[i] = 'Weapons Creation*'
for i in range(81, 101):
    power_category_fighting_outcomes[i] = 'Weapons Tinkering'
    
#Generating Power Category (Illusory Power)
power_category_illusory_power_outcomes = {}
for i in range(1, 16):
    power_category_illusory_power_outcomes[i] = 'Animate Image'
for i in range(16, 71):
    power_category_illusory_power_outcomes[i] = 'Illusion-Casting*'
for i in range(71, 85):
    power_category_illusory_power_outcomes[i] = 'Illusory Invisibility'
for i in range(85, 101):
    power_category_illusory_power_outcomes[i] = 'Illusory Duplication'

#Generating Power Category (Lifeform Control Power)
power_category_lifeform_control_outcomes = {}
for i in range(1, 15):
    power_category_lifeform_control_outcomes[i] = 'Biophysical Control*'
for i in range(15, 16):
    power_category_lifeform_control_outcomes[i] = 'Bio-Vampirism*'
for i in range(16, 19):
    power_category_lifeform_control_outcomes[i] = 'Body Transformation - Others'
for i in range(19, 27):
    power_category_lifeform_control_outcomes[i] = 'Emotion Control'
for i in range(27, 33):
    power_category_lifeform_control_outcomes[i] = 'Exorcism'
for i in range(33, 35):
    power_category_lifeform_control_outcomes[i] = 'Force Field vs. Hostilities'
for i in range(35, 36):
    power_category_lifeform_control_outcomes[i] = 'Forced Reincarnation'
for i in range(36, 40):
    power_category_lifeform_control_outcomes[i] = 'Grafting*'
for i in range(40, 52):
    power_category_lifeform_control_outcomes[i] = 'Hypnotic Control'
for i in range(52, 61):
    power_category_lifeform_control_outcomes[i] = 'Mind Control*'
for i in range(61, 63):
    power_category_lifeform_control_outcomes[i] = 'Mind Transferral*'
for i in range(63, 66):
    power_category_lifeform_control_outcomes[i] = 'Neural Manipulation'
for i in range(66, 67):
    power_category_lifeform_control_outcomes[i] = 'Plague Carrier'
for i in range(67, 70):
    power_category_lifeform_control_outcomes[i] = 'Plant Control'
for i in range(70, 72):
    power_category_lifeform_control_outcomes[i] = 'Plant Growth'
for i in range(72, 81):
    power_category_lifeform_control_outcomes[i] = 'Sense Alteration'
for i in range(81, 84):
    power_category_lifeform_control_outcomes[i] = 'Shapechange - Others*'
for i in range(84, 90):
    power_category_lifeform_control_outcomes[i] = 'Sleep - Induced'
for i in range(90, 91):
    power_category_lifeform_control_outcomes[i] = 'Spirit Storage'
for i in range(91, 96):
    power_category_lifeform_control_outcomes[i] = 'Summoning'
for i in range(96, 101):
    power_category_lifeform_control_outcomes[i] = 'Undead Control'

#Generating Power Category (Magical Power)
power_category_magic_outcomes = {}
for i in range(1, 9):
    power_category_magic_outcomes[i] = 'Enchantment*'
for i in range(9, 16):
    power_category_magic_outcomes[i] = 'Energy Source'
for i in range(16, 18):
    power_category_magic_outcomes[i] = 'Internal Limbo'
for i in range(18, 26):
    power_category_magic_outcomes[i] = 'Magic Control*'
for i in range(26, 29):
    power_category_magic_outcomes[i] = 'Magic Creation*'
for i in range(29, 34):
    power_category_magic_outcomes[i] = 'Magic Domination'
for i in range(34, 40):
    power_category_magic_outcomes[i] = 'Magic Transferral'
for i in range(40, 42):
    power_category_magic_outcomes[i] = 'Magic Vampirism*'
for i in range(42, 72):
    power_category_magic_outcomes[i] = 'Power Simulation'
for i in range(72, 78):
    power_category_magic_outcomes[i] = 'Reality Alteration*'
for i in range(78, 80):
    power_category_magic_outcomes[i] = 'Spirit Vampirism*'
for i in range(80, 96):
    power_category_magic_outcomes[i] = 'Sympathetic Magic'
for i in range(96, 101):
    power_category_magic_outcomes[i] = 'Warding'

#Generating Power Category (Matter Control Power)
power_category_matter_control_outcomes = {}
for i in range(1, 6):
    power_category_matter_control_outcomes[i] = 'Bonding'
for i in range(6, 18):
    power_category_matter_control_outcomes[i] = 'Collection'
for i in range(18, 23):
    power_category_matter_control_outcomes[i] = 'Crystallization'
for i in range(23, 30):
    power_category_matter_control_outcomes[i] = 'Diminution'
for i in range(30, 40):
    power_category_matter_control_outcomes[i] = 'Disruption'
for i in range(40, 47):
    power_category_matter_control_outcomes[i] = 'Enlargement'
for i in range(47, 52):
    power_category_matter_control_outcomes[i] = 'Geoforce'
for i in range(52, 62):
    power_category_matter_control_outcomes[i] = 'Matter Animation*'
for i in range(62, 69):
    power_category_matter_control_outcomes[i] = 'Machine Animation*'
for i in range(69, 74):
    power_category_matter_control_outcomes[i] = 'Micro-Environment'
for i in range(74, 84):
    power_category_matter_control_outcomes[i] = 'Molding'
for i in range(84, 94):
    power_category_matter_control_outcomes[i] = 'Weather'
for i in range(94, 101):
    power_category_matter_control_outcomes[i] = 'Zombie Animation*'

#Generating Power Category (Matter Conversion Power)
power_category_matter_conversion_outcomes = {}
for i in range(1, 11):
    power_category_matter_conversion_outcomes[i] = 'Coloration'
for i in range(11, 26):
    power_category_matter_conversion_outcomes[i] = 'Combustion'
for i in range(26, 46):
    power_category_matter_conversion_outcomes[i] = 'Disintegration*'
for i in range(46, 71):
    power_category_matter_conversion_outcomes[i] = 'Elemental Conversion*'
for i in range(71, 81):
    power_category_matter_conversion_outcomes[i] = 'Ionization'
for i in range(81, 101):
    power_category_matter_conversion_outcomes[i] = 'Molecular Conversion*'

#Generating Power Category (Matter Creation Power)
power_category_matter_creation_outcomes = {}
for i in range(1, 11):
    power_category_matter_creation_outcomes[i] = 'Artifact Creation*'
for i in range(11, 25):
    power_category_matter_creation_outcomes[i] = 'Elemental Creation'
for i in range(25, 30):
    power_category_matter_creation_outcomes[i] = 'Lifeform Creation*'
for i in range(30, 36):
    power_category_matter_creation_outcomes[i] = 'Mechanical Creation*'
for i in range(36, 60):
    power_category_matter_creation_outcomes[i] = 'Missle Creation'
for i in range(60, 70):
    power_category_matter_creation_outcomes[i] = 'Moleulcar Creation'
for i in range(70, 89):
    power_category_matter_creation_outcomes[i] = 'Spray'
for i in range(89,101):
    power_category_matter_creation_outcomes[i] = 'Webcasting'

#Generating Power Category (Mental Enhancement Power)
power_category_mental_enhancement_outcomes = {}
for i in range(1, 5):
    power_category_mental_enhancement_outcomes[i] = 'Clairaudience'
for i in range(5, 9):
    power_category_mental_enhancement_outcomes[i] = 'Clairvoyance'
for i in range(9, 12):
    power_category_mental_enhancement_outcomes[i] = 'Communicate with Animals'
for i in range(12, 13):
    power_category_mental_enhancement_outcomes[i] = 'Communicate with Cybernetics'
for i in range(13, 14):
    power_category_mental_enhancement_outcomes[i] = 'Communicate with Non-Living'
for i in range(14, 16):
    power_category_mental_enhancement_outcomes[i] = 'Communicate with Plants'
for i in range(16, 17):
    power_category_mental_enhancement_outcomes[i] = 'Cosmic Awareness*'
for i in range(17, 23):
    power_category_mental_enhancement_outcomes[i] = 'Danger Sense'
for i in range(23, 24):
    power_category_mental_enhancement_outcomes[i] = 'Dreamtravel'
for i in range(24, 27):
    power_category_mental_enhancement_outcomes[i] = 'Empathy'
for i in range(27, 28):
    power_category_mental_enhancement_outcomes[i] = 'Free Spirit*'
for i in range(28, 32):
    power_category_mental_enhancement_outcomes[i] = 'Hallucinations*'
for i in range(32, 41):
    power_category_mental_enhancement_outcomes[i] = 'Hyper-Intelligence'
for i in range(41, 48):
    power_category_mental_enhancement_outcomes[i] = 'Hyper-Invention'
for i in range(48, 49):
    power_category_mental_enhancement_outcomes[i] = 'Incarnation Awareness'
for i in range(49, 59):
    power_category_mental_enhancement_outcomes[i] = 'Iron Will'
for i in range(59, 66):
    power_category_mental_enhancement_outcomes[i] = 'Linguistics'
for i in range(66, 67):
    power_category_mental_enhancement_outcomes[i] = 'Mental Duplication'
for i in range(67, 68):
    power_category_mental_enhancement_outcomes[i] = 'Mental Invisibility'
for i in range(68, 70):
    power_category_mental_enhancement_outcomes[i] = 'Mental Probe'
for i in range(70, 73):
    power_category_mental_enhancement_outcomes[i] = 'Mind Blast'
for i in range(73, 74):
    power_category_mental_enhancement_outcomes[i] = 'Mind Drain'
for i in range(74, 75):
    power_category_mental_enhancement_outcomes[i] = 'Postcognition'
for i in range(75, 76):
    power_category_mental_enhancement_outcomes[i] = 'Precognition*'
for i in range(76, 77):
    power_category_mental_enhancement_outcomes[i] = 'Psionic Vimpirism*'
for i in range(77, 79):
    power_category_mental_enhancement_outcomes[i] = 'Remote Sensing'
for i in range(79, 80):
    power_category_mental_enhancement_outcomes[i] = 'Sensory Link'
for i in range(80, 81):
    power_category_mental_enhancement_outcomes[i] = 'Serial Immortality*'
for i in range(81, 82):
    power_category_mental_enhancement_outcomes[i] = 'Speechthrowing'
for i in range(82, 86):
    power_category_mental_enhancement_outcomes[i] = 'Telekinesis'
for i in range(86, 87):
    power_category_mental_enhancement_outcomes[i] = 'Telelocation*'
for i in range(87, 97):
    power_category_mental_enhancement_outcomes[i] = 'Telepathy'
for i in range(97, 101):
    power_category_mental_enhancement_outcomes[i] = 'Total Memory'

#Generating Power Category (Physical Enhancement Power)
power_category_physical_enhancement_outcomes = {}
for i in range(1, 15):
    power_category_physical_enhancement_outcomes[i] = 'Armor Skin'
for i in range(15, 29):
    power_category_physical_enhancement_outcomes[i] = 'Body Resistance'
for i in range(29, 31):
    power_category_physical_enhancement_outcomes[i] = 'Chemical Touch'
for i in range(31, 34):
    power_category_physical_enhancement_outcomes[i] = 'Digestive Adaptation'
for i in range(34, 41):
    power_category_physical_enhancement_outcomes[i] = 'Hyper-Speed'
for i in range(41, 43):
    power_category_physical_enhancement_outcomes[i] = 'Hypnotic Voice'
for i in range(43, 46):
    power_category_physical_enhancement_outcomes[i] = 'Lung Adaptability'
for i in range(46, 48):
    power_category_physical_enhancement_outcomes[i] = 'Pheromones*'
for i in range(48, 61):
    power_category_physical_enhancement_outcomes[i] = 'Regeneration*'
for i in range(61, 63):
    power_category_physical_enhancement_outcomes[i] = 'Self-Revival'
for i in range(63, 68):
    power_category_physical_enhancement_outcomes[i] = 'Self-Sustenance'
for i in range(68, 72):
    power_category_physical_enhancement_outcomes[i] = 'Stealth'
for i in range(72, 77):
    power_category_physical_enhancement_outcomes[i] = 'Suspended Animation'
for i in range(77, 79):
    power_category_physical_enhancement_outcomes[i] = 'True Invulnerability*'
for i in range(79, 83):
    power_category_physical_enhancement_outcomes[i] = 'Vocal Control'
for i in range(83, 91):
    power_category_physical_enhancement_outcomes[i] = 'Waterbreathing'
for i in range(91, 101):
    power_category_physical_enhancement_outcomes[i] = 'Water Freedom'

#Generating Power Category (Power Control)
power_category_power_control_outcomes = {}
for i in range(1, 9):
    power_category_power_control_outcomes[i] = 'Control*'
for i in range(9, 13):
    power_category_power_control_outcomes[i] = 'Creation*'
for i in range(13, 19):
    power_category_power_control_outcomes[i] = 'Domination*'
for i in range(19, 24):
    power_category_power_control_outcomes[i] = 'Duplication'
for i in range(24, 38):
    power_category_power_control_outcomes[i] = 'Energy Source'
for i in range(38, 40):
    power_category_power_control_outcomes[i] = 'Energy Source Creation*'
for i in range(40, 50):
    power_category_power_control_outcomes[i] = 'Focus'
for i in range(50, 56):
    power_category_power_control_outcomes[i] = 'Gestalt'
for i in range(56, 61):
    power_category_power_control_outcomes[i] = 'Nemesis'
for i in range(61, 65):
    power_category_power_control_outcomes[i] = 'Power Transferral'
for i in range(65, 74):
    power_category_power_control_outcomes[i] = 'Power Vampirism*'
for i in range(74, 84):
    power_category_power_control_outcomes[i] = 'Residual Absorption'
for i in range(84, 97):
    power_category_power_control_outcomes[i] = 'Selection'
for i in range(97, 101):
    power_category_power_control_outcomes[i] = 'Weakness Creation*'

#Generating Power Category (Self-Alteration Power)
power_category_self_alteration_outcomes = {}
for i in range(1, 3):
    power_category_self_alteration_outcomes[i] = 'Age-Shift'
for i in range(3, 10):
    power_category_self_alteration_outcomes[i] = 'Alter Ego'
for i in range(10, 11):
    power_category_self_alteration_outcomes[i] = 'Anatomical Separation'
for i in range(11, 14):
    power_category_self_alteration_outcomes[i] = 'Animal Transformation'
for i in range(14, 20):
    power_category_self_alteration_outcomes[i] = 'Animal Mimicry'
for i in range(20, 22):
    power_category_self_alteration_outcomes[i] = 'Blending'
for i in range(22, 28):
    power_category_self_alteration_outcomes[i] = 'Body Adaptation*'
for i in range(28, 31):
    power_category_self_alteration_outcomes[i] = 'Body Transformation*'
for i in range(31, 34):
    power_category_self_alteration_outcomes[i] = 'Body Coating'
for i in range(34, 38):
    power_category_self_alteration_outcomes[i] = 'Chemical Mimicry'
for i in range(38, 39):
    power_category_self_alteration_outcomes[i] = 'Energy Body*'
for i in range(39, 43):
    power_category_self_alteration_outcomes[i] = 'Energy Sheath'
for i in range(43, 45):
    power_category_self_alteration_outcomes[i] = 'Evolution'
for i in range(45, 50):
    power_category_self_alteration_outcomes[i] = 'Imitation'
for i in range(50, 56):
    power_category_self_alteration_outcomes[i] = 'Invisibility'
for i in range(56, 58):
    power_category_self_alteration_outcomes[i] = 'Physical Gestalt'
for i in range(58, 61):
    power_category_self_alteration_outcomes[i] = 'Plant Mimicry'
for i in range(61, 62):
    power_category_self_alteration_outcomes[i] = 'Prehensile Hair'
for i in range(62, 63):
    power_category_self_alteration_outcomes[i] = 'Self-Duplication*'
for i in range(63, 64):
    power_category_self_alteration_outcomes[i] = 'Self-Vegetation'
for i in range(64, 68):
    power_category_self_alteration_outcomes[i] = 'Shapeshifting'
for i in range(68, 71):
    power_category_self_alteration_outcomes[i] = 'Spirit Gestalt'
for i in range(71, 72):
    power_category_self_alteration_outcomes[i] = 'Bouncing Ball'
for i in range(72, 75):
    power_category_self_alteration_outcomes[i] = 'Elongation'
for i in range(75, 79):
    power_category_self_alteration_outcomes[i] = 'Growth'
for i in range(79, 82):
    power_category_self_alteration_outcomes[i] = 'Mass Decrease'
for i in range(82, 85):
    power_category_self_alteration_outcomes[i] = 'Mass Increase'
for i in range(85, 91):
    power_category_self_alteration_outcomes[i] = 'Phasing'
for i in range(91, 95):
    power_category_self_alteration_outcomes[i] = 'Plasticity'
for i in range(95, 100):
    power_category_self_alteration_outcomes[i] = 'Shrinking'
for i in range(100, 101):
    power_category_self_alteration_outcomes[i] = 'Two-Dimensionality'    

#Generating Power Category (Travel Power)
power_category_travel_outcomes = {}
for i in range(1, 3):
    power_category_travel_outcomes[i] = 'Astral Body'
for i in range(3, 7):
    power_category_travel_outcomes[i] = 'Carrier Wave'
for i in range(7, 11):
    power_category_travel_outcomes[i] = 'Dimensional Travel'
for i in range(11, 13):
    power_category_travel_outcomes[i] = 'Energy Path'
for i in range(13, 15):
    power_category_travel_outcomes[i] = 'Floating Disc'
for i in range(15, 21):
    power_category_travel_outcomes[i] = 'Gateway*'
for i in range(21, 27):
    power_category_travel_outcomes[i] = 'Gliding'
for i in range(27, 29):
    power_category_travel_outcomes[i] = 'Hyper-Digging'
for i in range(29, 35):
    power_category_travel_outcomes[i] = 'Hyper-Leaping'
for i in range(35, 43):
    power_category_travel_outcomes[i] = 'Hyper-Running'
for i in range(43, 47):
    power_category_travel_outcomes[i] = 'Hyper-Swimming'
for i in range(47, 53):
    power_category_travel_outcomes[i] = 'Levitation'
for i in range(53, 57):
    power_category_travel_outcomes[i] = 'Rocket'
for i in range(57, 59):
    power_category_travel_outcomes[i] = 'Skywalk'
for i in range(59, 65):
    power_category_travel_outcomes[i] = 'Spiderclimb'
for i in range(65, 73):
    power_category_travel_outcomes[i] = 'Teleport Self*'
for i in range(73, 77):
    power_category_travel_outcomes[i] = 'Teleport Others*'
for i in range(77, 79):
    power_category_travel_outcomes[i] = 'Telereformation'
for i in range(79, 81):
    power_category_travel_outcomes[i] = 'Time Travel*'
for i in range(81, 83):
    power_category_travel_outcomes[i] = 'Troubleseeker'
for i in range(83, 94):
    power_category_travel_outcomes[i] = 'True Flight'
for i in range(94, 98):
    power_category_travel_outcomes[i] = 'Water Walking'
for i in range(98, 101):
    power_category_travel_outcomes[i] = 'Whirlwind'

#Generating Talent Categories
talent_category_outcomes = {}
for i in range(1, 7):
    talent_category_outcomes[i] = 'Alternative Sciences'
for i in range(7, 13):
    talent_category_outcomes[i] = 'Astronomy'
for i in range(13, 21):
    talent_category_outcomes[i] = 'Biology'
for i in range(21, 29):
    talent_category_outcomes[i] = 'Chemistry'
for i in range(29, 35):
    talent_category_outcomes[i] = 'Crime and Law'
for i in range(35, 39):
    talent_category_outcomes[i] = 'Cognitive Sciences and Humanities'
for i in range(39, 46):
    talent_category_outcomes[i] = 'Computer Science'
for i in range(46, 53):
    talent_category_outcomes[i] = 'Earth Science'
for i in range(53, 60):
    talent_category_outcomes[i] = 'Engineering'
for i in range(60, 67):
    talent_category_outcomes[i] = 'Fighting Skills'
for i in range(67, 71):
    talent_category_outcomes[i] = 'Medicine'
for i in range(71, 75):
    talent_category_outcomes[i] = 'Mystic and Mental'
for i in range(75, 80):
    talent_category_outcomes[i] = 'Other'
for i in range(80, 87):
    talent_category_outcomes[i] = 'Physics'
for i in range(87, 94):
    talent_category_outcomes[i] = 'Piloting'
for i in range(94, 101):
    talent_category_outcomes[i] = 'Weapons'
    
#Generating Talent Category (Alternative Sciences)
talent_category_alternative_sciences_outcomes = {}
for i in range(1, 26):
    talent_category_alternative_sciences_outcomes[i] = 'Catastrophism'
for i in range(26, 51):
    talent_category_alternative_sciences_outcomes[i] = 'Cryonics'
for i in range(51, 76):
    talent_category_alternative_sciences_outcomes[i] = 'Paranormal Phenomena'
for i in range(76, 101):
    talent_category_alternative_sciences_outcomes[i] = 'Parapsychology'

#Generating Talent Category (Astronomy)
talent_category_astronomy_outcomes = {}
for i in range(1, 21):
    talent_category_astronomy_outcomes[i] = 'Astronautics'
for i in range(21, 41):
    talent_category_astronomy_outcomes[i] = 'Astrophotography'
for i in range(41, 61):
    talent_category_astronomy_outcomes[i] = 'Astrophysics'
for i in range(61, 81):
    talent_category_astronomy_outcomes[i] = 'Radio Astronomy'
for i in range(81, 101):
    talent_category_astronomy_outcomes[i] = 'Stellar Cartography'

#Generating Talent Category (Biology)
talent_category_biology_outcomes = {}
for i in range(1, 6):
    talent_category_biology_outcomes[i] = 'Anatomy'
for i in range(6, 11):
    talent_category_biology_outcomes[i] = 'Animal Behavior'
for i in range(11, 16):
    talent_category_biology_outcomes[i] = 'Bio-Physics'
for i in range(16, 22):
    talent_category_biology_outcomes[i] = 'Biotechnology'
for i in range(22, 27):
    talent_category_biology_outcomes[i] = 'Botany'
for i in range(27, 32):
    talent_category_biology_outcomes[i] = 'Ecology'
for i in range(32, 38):
    talent_category_biology_outcomes[i] = 'Genetics'
for i in range(38, 43):
    talent_category_biology_outcomes[i] = 'Immunology'
for i in range(43, 49):
    talent_category_biology_outcomes[i] = 'Marine Biology'
for i in range(49, 55):
    talent_category_biology_outcomes[i] = 'Micro-Biology'
for i in range(55, 62):
    talent_category_biology_outcomes[i] = 'Neurosciences'
for i in range(62, 68):
    talent_category_biology_outcomes[i] = 'Parasitology'
for i in range(68, 74):
    talent_category_biology_outcomes[i] = 'Pharmacology'
for i in range(74, 80):
    talent_category_biology_outcomes[i] = 'Phenology'
for i in range(80, 86):
    talent_category_biology_outcomes[i] = 'Physiology'
for i in range(86, 91):
    talent_category_biology_outcomes[i] = 'Psychobiology'
for i in range(91, 96):
    talent_category_biology_outcomes[i] = 'Radiobiology'
for i in range(96, 101):
    talent_category_biology_outcomes[i] = 'Zoology'

#Generating Talent Category (Chemistry)
talent_category_chemistry_outcomes = {}
for i in range(1, 12):
    talent_category_chemistry_outcomes[i] = 'Alchemy'
for i in range(12, 25):
    talent_category_chemistry_outcomes[i] = 'Chemical and Biological Weapons'
for i in range(25, 38):
    talent_category_chemistry_outcomes[i] = 'Chemical Engineering'
for i in range(38, 51):
    talent_category_chemistry_outcomes[i] = 'Electrochemistry'
for i in range(51, 65):
    talent_category_chemistry_outcomes[i] = 'Organic Chemistry'
for i in range(65, 78):
    talent_category_chemistry_outcomes[i] = 'Polymers'
for i in range(78, 89):
    talent_category_chemistry_outcomes[i] = 'Sonochemistry'
for i in range(89, 101):
    talent_category_chemistry_outcomes[i] = 'Spectroscopy'

#Generating Talent Category (Crime and Law)
talent_category_crime_and_law_outcomes = {}
for i in range(1, 5):
    talent_category_crime_and_law_outcomes[i] = 'Ballistics'
for i in range(5, 8):
    talent_category_crime_and_law_outcomes[i] = 'Camoflage'
for i in range(8, 11):
    talent_category_crime_and_law_outcomes[i] = 'Counterfeit Recognition'
for i in range(11, 13):
    talent_category_crime_and_law_outcomes[i] = 'Clue Analysis'
for i in range(13, 17):
    talent_category_crime_and_law_outcomes[i] = 'Criminology'
for i in range(17, 23):
    talent_category_crime_and_law_outcomes[i] = 'Demolitions'
for i in range(23, 30):
    talent_category_crime_and_law_outcomes[i] = 'Detective/Espionage'
for i in range(30, 33):
    talent_category_crime_and_law_outcomes[i] = 'Disguise'
for i in range(33, 38):
    talent_category_crime_and_law_outcomes[i] = 'Forensics'
for i in range(38, 43):
    talent_category_crime_and_law_outcomes[i] = 'Forgery'
for i in range(43, 45):
    talent_category_crime_and_law_outcomes[i] = 'Intimidation'
for i in range(45, 48):
    talent_category_crime_and_law_outcomes[i] = 'Interrogation'
for i in range(48, 56):
    talent_category_crime_and_law_outcomes[i] = 'Law'
for i in range(56, 65):
    talent_category_crime_and_law_outcomes[i] = 'Law Enforcement'
for i in range(65, 71):
    talent_category_crime_and_law_outcomes[i] = 'Military'
for i in range(71, 78):
    talent_category_crime_and_law_outcomes[i] = 'Negotiations'
for i in range(78, 84):
    talent_category_crime_and_law_outcomes[i] = 'Pollice Procedure'
for i in range(84, 89):
    talent_category_crime_and_law_outcomes[i] = 'Pick Pocket'
for i in range(89, 93):
    talent_category_crime_and_law_outcomes[i] = 'Security'
for i in range(93, 97):
    talent_category_crime_and_law_outcomes[i] = 'Stealth'
for i in range(97, 101):
    talent_category_crime_and_law_outcomes[i] = 'Tracking'

#Generating Talent Category (Cognitive Sciences and Humanities)
talent_category_cognitive_sciences_outcomes = {}
for i in range(1, 14):
    talent_category_cognitive_sciences_outcomes[i] = 'Anthropology'
for i in range(14, 22):
    talent_category_cognitive_sciences_outcomes[i] = 'Archaeology'
for i in range(22, 30):
    talent_category_cognitive_sciences_outcomes[i] = 'Cartography'
for i in range(30, 40):
    talent_category_cognitive_sciences_outcomes[i] = 'History'
for i in range(40, 53):
    talent_category_cognitive_sciences_outcomes[i] = 'Philology (linguistics)'
for i in range(53, 67):
    talent_category_cognitive_sciences_outcomes[i] = 'Music Cognition'
for i in range(67, 81):
    talent_category_cognitive_sciences_outcomes[i] = 'Philosophy'
for i in range(81, 101):
    talent_category_cognitive_sciences_outcomes[i] = 'Psychology'

#Generating Talent Category (Computer Science)
talent_category_computer_science_outcomes = {}
for i in range(1, 14):
    talent_category_computer_science_outcomes[i] = 'Architecture'
for i in range(14, 30):
    talent_category_computer_science_outcomes[i] = 'Artificial Intelligence'
for i in range(30, 46):
    talent_category_computer_science_outcomes[i] = 'Computer Engineering'
for i in range(46, 52):
    talent_category_computer_science_outcomes[i] = 'Electronic Counter Measures'
for i in range(52, 59):
    talent_category_computer_science_outcomes[i] = 'Graphics'
for i in range(59, 76):
    talent_category_computer_science_outcomes[i] = 'Security and Encryption'
for i in range(76, 90):
    talent_category_computer_science_outcomes[i] = 'Programming'
for i in range(90, 101):
    talent_category_computer_science_outcomes[i] = 'Virtual Reality'

#Generating Talent Category (Earth Science)
talent_category_earth_science_outcomes = {}
for i in range(1, 12):
    talent_category_earth_science_outcomes[i] = 'Agriculture'
for i in range(12, 19):
    talent_category_earth_science_outcomes[i] = 'Ecology'
for i in range(19, 26):
    talent_category_earth_science_outcomes[i] = 'Geography'
for i in range(26, 39):
    talent_category_earth_science_outcomes[i] = 'Geology'
for i in range(39, 51):
    talent_category_earth_science_outcomes[i] = 'Hydrology'
for i in range(51, 65):
    talent_category_earth_science_outcomes[i] = 'Meterology'
for i in range(65, 76):
    talent_category_earth_science_outcomes[i] = 'Metallurgy'
for i in range(76, 91):
    talent_category_earth_science_outcomes[i] = 'Oceanography'
for i in range(91, 101):
    talent_category_earth_science_outcomes[i] = 'Seismology'

#Generating Talent Category (Engineering)
talent_category_engineering_outcomes = {}
for i in range(1, 7):
    talent_category_engineering_outcomes[i] = 'Aviation and Aeronautics Engineering'
for i in range(7, 12):
    talent_category_engineering_outcomes[i] = 'Astronautic Engineering' 
for i in range(12, 17):
    talent_category_engineering_outcomes[i] = 'Automotive Engineering'
for i in range(17, 20):
    talent_category_engineering_outcomes[i] = 'Battlesuit Design'
for i in range(20, 22):
    talent_category_engineering_outcomes[i] = 'Civil Engineering'
for i in range(22, 26):
    talent_category_engineering_outcomes[i] = 'Cybernetics/Bionics'
for i in range(26, 29):
    talent_category_engineering_outcomes[i] = 'Demolitions'
for i in range(29, 32):
    talent_category_engineering_outcomes[i] = 'Gadgetry'
for i in range(32, 35):
    talent_category_engineering_outcomes[i] = 'Identify Gadgets' 
for i in range(35, 39):
    talent_category_engineering_outcomes[i] = 'Electrical Engineering'
for i in range(39, 45):
    talent_category_engineering_outcomes[i] = 'Locksmith'
for i in range(45, 51):
    talent_category_engineering_outcomes[i] = 'Marine Engineering'
for i in range(51, 58):
    talent_category_engineering_outcomes[i] = 'Mechanical Engineering'
for i in range(58, 64):
    talent_category_engineering_outcomes[i] = 'Military Engineering'
for i in range(64, 70):
    talent_category_engineering_outcomes[i] = 'Nuclear Engineering'
for i in range(70, 77):
    talent_category_engineering_outcomes[i] = 'Repair/Tinkering' 
for i in range(77, 83):
    talent_category_engineering_outcomes[i] = 'Robotics'
for i in range(83, 89):
    talent_category_engineering_outcomes[i] = 'Structural Engineering'
for i in range(89, 96):
    talent_category_engineering_outcomes[i] = 'Weapons Engineering'
for i in range(96, 101):
    talent_category_engineering_outcomes[i] = 'Weapons Tinkering'

#Generating Talent Category (Fighting Skills)
talent_category_fighting_skills_outcomes = {}
for i in range(1, 4):
    talent_category_fighting_skills_outcomes[i] = 'Aerial Combat'
for i in range(4, 8):
    talent_category_fighting_skills_outcomes[i] = 'Underwater Combat'
for i in range(8, 12):
    talent_category_fighting_skills_outcomes[i] = 'Climbing'
for i in range(12, 16):
    talent_category_fighting_skills_outcomes[i] = 'Dodging'
for i in range(16, 20):
    talent_category_fighting_skills_outcomes[i] = 'Gymnastics'
for i in range(20, 24):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts A'
for i in range(24, 28):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts B'
for i in range(28, 32):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts C'
for i in range(32, 35):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts D'
for i in range(35, 39):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts E'
for i in range(39, 43):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts F'
for i in range(43, 46):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts G'
for i in range(46, 50):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts H'
for i in range(50, 54):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts I'
for i in range(54, 58):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts J'
for i in range(58, 62):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts K'
for i in range(62, 66):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts L'
for i in range(66, 70):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts M'
for i in range(70, 74):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts N'
for i in range(74, 78):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts O'
for i in range(78, 82):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts P'
for i in range(82, 86):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts Q'
for i in range(86, 90):
    talent_category_fighting_skills_outcomes[i] = 'Martial Arts R'
for i in range(90, 93):
    talent_category_fighting_skills_outcomes[i] = 'Quick-Striking'
for i in range(93, 95):
    talent_category_fighting_skills_outcomes[i] = 'Wrestling'
for i in range(95, 97):
    talent_category_fighting_skills_outcomes[i] = 'Thrown Objects'
for i in range(97, 99):
    talent_category_fighting_skills_outcomes[i] = 'Acrobatics'
for i in range(99, 101):
    talent_category_fighting_skills_outcomes[i] = 'Tumbling'
   
#Generating Talent Category (Medicine)
talent_category_medicine_outcomes = {}
for i in range(1, 6):
    talent_category_medicine_outcomes[i] = 'Acupuncture'
for i in range(6, 11):
    talent_category_medicine_outcomes[i] = 'Cardiology'
for i in range(11, 16):
    talent_category_medicine_outcomes[i] = 'Chiropractic'
for i in range(16, 21):
    talent_category_medicine_outcomes[i] = 'Dentistry'
for i in range(21, 26):
    talent_category_medicine_outcomes[i] = 'Emergency Medicine'
for i in range(26, 34):
    talent_category_medicine_outcomes[i] = 'First Aid'
for i in range(34, 40):
    talent_category_medicine_outcomes[i] = 'Geriatrics'
for i in range(40, 45):
    talent_category_medicine_outcomes[i] = 'Obstetrics and Gynecology'
for i in range(45, 50):
    talent_category_medicine_outcomes[i] = 'Oncology'
for i in range(50, 55):
    talent_category_medicine_outcomes[i] = 'Pathology'
for i in range(55, 61):
    talent_category_medicine_outcomes[i] = 'Pediatrics'
for i in range(61, 66):
    talent_category_medicine_outcomes[i] = 'Pharmacology'
for i in range(66, 71):
    talent_category_medicine_outcomes[i] = 'Physical Therapy'
for i in range(71, 76):
    talent_category_medicine_outcomes[i] = 'Plastic Surgery'
for i in range(76, 82):
    talent_category_medicine_outcomes[i] = 'Psychiatry'
for i in range(82, 88):
    talent_category_medicine_outcomes[i] = 'Radiology'
for i in range(88, 94):
    talent_category_medicine_outcomes[i] = 'Sports Medicine'
for i in range(94, 99):
    talent_category_medicine_outcomes[i] = 'Surgery'
for i in range(99, 101):
    talent_category_medicine_outcomes[i] = 'Veterinary'

#Generating Talent Category (Mystic and Mental)
talent_category_mystic_and_mental_outcomes = {}
for i in range(1, 9):
    talent_category_mystic_and_mental_outcomes[i] = 'Bibliophile'
for i in range(9, 17):
    talent_category_mystic_and_mental_outcomes[i] = 'Demonologist'
for i in range(17, 25):
    talent_category_mystic_and_mental_outcomes[i] = 'Mesmerism and Hypnosis'
for i in range(25, 32):
    talent_category_mystic_and_mental_outcomes[i] = 'Mystic Background'
for i in range(33, 41):
    talent_category_mystic_and_mental_outcomes[i] = 'Occult Lore'
for i in range(41, 46):
    talent_category_mystic_and_mental_outcomes[i] = 'Resist Domination'
for i in range(46, 51):
    talent_category_mystic_and_mental_outcomes[i] = 'Ritual Magics'
for i in range(51, 57):
    talent_category_mystic_and_mental_outcomes[i] = 'Runesmith'
for i in range(57, 66):
    talent_category_mystic_and_mental_outcomes[i] = 'Scholar of Antiquities'
for i in range(66, 75):
    talent_category_mystic_and_mental_outcomes[i] = 'Sleight of Hand'
for i in range(75, 84):
    talent_category_mystic_and_mental_outcomes[i] = 'Theogony'
for i in range(84, 93):
    talent_category_mystic_and_mental_outcomes[i] = 'Trance'
for i in range(93, 101):
    talent_category_mystic_and_mental_outcomes[i] = 'Zoologist of Magic'

#Generating Talent Category (Other)
talent_category_other_outcomes = {}
for i in range(1, 6):
    talent_category_other_outcomes[i] = 'Accounting'
for i in range(6, 10):
    talent_category_other_outcomes[i] = 'Actor'  
for i in range(10, 15):
    talent_category_other_outcomes[i] = 'Animal Training'
for i in range(15, 20):
    talent_category_other_outcomes[i] = 'Artist'
for i in range(20, 26):
    talent_category_other_outcomes[i] = 'Business/Finance'
for i in range(26, 31):
    talent_category_other_outcomes[i] = 'Escape Artist'
for i in range(31, 33):
    talent_category_other_outcomes[i] = 'Heir To A Fortune'
for i in range(33, 37):
    talent_category_other_outcomes[i] = 'Instructor'
for i in range(37, 42):
    talent_category_other_outcomes[i] = 'Journalism'
for i in range(42, 47):
    talent_category_other_outcomes[i] = 'Leadership'
for i in range(47, 53):
    talent_category_other_outcomes[i] = 'Performer'
for i in range(53, 58):
    talent_category_other_outcomes[i] = 'Persuasion'
for i in range(58, 64):
    talent_category_other_outcomes[i] = 'Pick Pocketing'
for i in range(64, 70):
    talent_category_other_outcomes[i] = 'Politics'
for i in range(70, 77):
    talent_category_other_outcomes[i] = 'Seduction'
for i in range(77, 83):
    talent_category_other_outcomes[i] = 'Sewing and Tailoring'
for i in range(83, 90):
    talent_category_other_outcomes[i] = 'Streetsmart'
for i in range(90, 94):
    talent_category_other_outcomes[i] = 'Student'
for i in range(94, 97):
    talent_category_other_outcomes[i] = 'Thief'
for i in range(97, 100):
    talent_category_other_outcomes[i] = 'Trivia'
for i in range(100, 101):
    talent_category_other_outcomes[i] = 'Writer'

#Generating Talent Category (Physics)
talent_category_physics_outcomes = {}
for i in range(1, 16):
    talent_category_physics_outcomes[i] = 'Acoustics'
for i in range(16, 33):
    talent_category_physics_outcomes[i] = 'Atomic Physics'
for i in range(33, 49):
    talent_category_physics_outcomes[i] = 'Cryogenics'
for i in range(49, 67):
    talent_category_physics_outcomes[i] = 'Energy and Particle Physics'
for i in range(67, 84):
    talent_category_physics_outcomes[i] = 'Mathematics'
for i in range(84, 101):
    talent_category_physics_outcomes[i] = 'Quantum Physics'
    
#Generating Talent Category (Piloting)
talent_category_piloting_outcomes = {}
for i in range(1, 16):
    talent_category_piloting_outcomes[i] = 'Airplane Pilot'
for i in range(16, 28):
    talent_category_piloting_outcomes[i] = 'Automobile Specialist'
for i in range(28, 39):
    talent_category_piloting_outcomes[i] = 'Boat Pilot'
for i in range(39, 51):
    talent_category_piloting_outcomes[i] = 'Helicopter'
for i in range(51, 64):
    talent_category_piloting_outcomes[i] = 'Military Vehicle Specialist'
for i in range(64, 78):
    talent_category_piloting_outcomes[i] = 'Motorcycle'
for i in range(78, 90):
    talent_category_piloting_outcomes[i] = 'Spacecraft'
for i in range(90, 101):
    talent_category_piloting_outcomes[i] = 'Submersible Vehicle'
    
#Generating Talent Category (Weapons)
talent_category_weapons_outcomes = {}
for i in range(1, 7):
    talent_category_weapons_outcomes[i] = 'Ancient Weapons'
for i in range(7, 13):
    talent_category_weapons_outcomes[i] = 'Battlesuit Operation'
for i in range(13, 21):
    talent_category_weapons_outcomes[i] = 'Blunt Weapons'
for i in range(21, 28):
    talent_category_weapons_outcomes[i] = 'Bows'
for i in range(28, 35):
    talent_category_weapons_outcomes[i] = 'Energy Weapons'
for i in range(35, 43):
    talent_category_weapons_outcomes[i] = 'Guns'
for i in range(43, 50):
    talent_category_weapons_outcomes[i] = 'Marksmen'
for i in range(50, 57):
    talent_category_weapons_outcomes[i] = 'Oriental Weapons'
for i in range(57, 64):
    talent_category_weapons_outcomes[i] = 'Heavy Weapons'
for i in range(64, 71):
    talent_category_weapons_outcomes[i] = 'Fencing'
for i in range(71, 77):
    talent_category_weapons_outcomes[i] = 'Paired Weapons'
for i in range(77, 84):
    talent_category_weapons_outcomes[i] = 'Sharp Weapons'
for i in range(84, 91):
    talent_category_weapons_outcomes[i] = 'Thrown Weapons'
for i in range(91, 97):
    talent_category_weapons_outcomes[i] = 'Weapons Master'
for i in range(97, 101):
    talent_category_weapons_outcomes[i] = 'Weapons Specialist'
               
def get_physical_form(roll):
    if roll not in physical_form_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return physical_form_outcomes[roll]

def get_origin(roll):
    if roll not in origin_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return origin_outcomes[roll]

def get_weakness_stimulus(roll):
    if roll not in weakness_stimulus_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return weakness_stimulus_outcomes[roll]

def get_weakness_effect(roll):
    if roll not in weakness_effect_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return weakness_effect_outcomes[roll]

def get_weakness_duration(roll):
    if roll not in weakness_duration_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return weakness_duration_outcomes[roll]
 
def get_faserip_rank1(roll):
    if roll not in faserip_rank1_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank1_outcomes[roll]

def get_faserip_rank2(roll):
    if roll not in faserip_rank2_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank2_outcomes[roll]

def get_faserip_rank3(roll):
    if roll not in faserip_rank3_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank3_outcomes[roll]

def get_faserip_rank4(roll):
    if roll not in faserip_rank4_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank4_outcomes[roll]

def get_faserip_rank5(roll):
    if roll not in faserip_rank5_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return faserip_rank5_outcomes[roll]

def get_powers(roll):
    if roll not in powers_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return powers_outcomes[roll]

def get_talents(roll):
    if roll not in talents_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talents_outcomes[roll]

def get_contacts(roll):
    if roll not in contacts_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return contacts_outcomes[roll]

def get_power_class(roll):
    if roll not in power_class_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_class_outcomes[roll]

def get_power_category(roll):
    if roll not in power_category_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_outcomes[roll]

def get_power_category_defensive(roll):
    if roll not in power_category_defensive_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_defensive_outcomes[roll]

def get_power_category_detection(roll):
    if roll not in power_category_detection_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_detection_outcomes[roll]

def get_power_category_energy_control(roll):
    if roll not in power_category_energy_control_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_energy_control_outcomes[roll]

def get_power_category_energy_emission(roll):
    if roll not in power_category_energy_emission_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_energy_emission_outcomes[roll]

def get_power_category_fighting_power(roll):
    if roll not in power_category_fighting_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_fighting_outcomes[roll]

def get_power_category_illusory_power(roll):
    if roll not in power_category_illusory_power_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_illusory_power_outcomes[roll]

def get_power_category_lifeform_contol(roll):
    if roll not in power_category_lifeform_control_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_lifeform_control_outcomes[roll]

def get_power_category_magic(roll):
    if roll not in power_category_magic_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_magic_outcomes[roll]

def get_power_category_matter_control(roll):
    if roll not in power_category_matter_control_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_matter_control_outcomes[roll]

def get_power_category_matter_conversion(roll):
    if roll not in power_category_matter_conversion_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_matter_conversion_outcomes[roll]

def get_power_category_matter_creation(roll):
    if roll not in power_category_matter_creation_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_matter_creation_outcomes[roll]

def get_power_category_mental_enhancement(roll):
    if roll not in power_category_mental_enhancement_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_mental_enhancement_outcomes[roll]

def get_power_category_physical_enhancement(roll):
    if roll not in power_category_physical_enhancement_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_physical_enhancement_outcomes[roll]

def get_power_category_power_control(roll):
    if roll not in power_category_power_control_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_power_control_outcomes[roll]

def get_power_category_self_alteration(roll):
    if roll not in power_category_self_alteration_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_self_alteration_outcomes[roll]

def get_power_category_travel(roll):
    if roll not in power_category_travel_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return power_category_travel_outcomes[roll]

def get_talent_category(roll):
    if roll not in talent_category_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_outcomes[roll]

def get_talent_category_alternative_sciences(roll):
    if roll not in talent_category_alternative_sciences_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_alternative_sciences_outcomes[roll]

def get_talent_category_astronomy(roll):
    if roll not in talent_category_astronomy_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_astronomy_outcomes[roll]

def get_talent_category_biology(roll):
    if roll not in talent_category_biology_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_biology_outcomes[roll]

def get_talent_category_chemistry(roll):
    if roll not in talent_category_chemistry_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_chemistry_outcomes[roll]

def get_talent_category_crime_and_law(roll):
    if roll not in talent_category_crime_and_law_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_crime_and_law_outcomes[roll]

def get_talent_category_cognitive_sciences(roll):
    if roll not in talent_category_cognitive_sciences_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_cognitive_sciences_outcomes[roll]

def get_talent_category_computer_science(roll):
    if roll not in talent_category_computer_science_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_computer_science_outcomes[roll]

def get_talent_category_earth_science(roll):
    if roll not in talent_category_earth_science_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_earth_science_outcomes[roll]

def get_talent_category_engineering(roll):
    if roll not in talent_category_engineering_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_engineering_outcomes[roll]

def get_talent_category_fighting_skills(roll):
    if roll not in talent_category_fighting_skills_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_fighting_skills_outcomes[roll]

def get_talent_category_medicine(roll):
    if roll not in talent_category_medicine_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_medicine_outcomes[roll]

def get_talent_category_mystic_and_mental(roll):
    if roll not in talent_category_mystic_and_mental_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_mystic_and_mental_outcomes[roll]

def get_talent_category_other(roll):
    if roll not in talent_category_other_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_other_outcomes[roll]

def get_talent_category_physics(roll):
    if roll not in talent_category_physics_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_physics_outcomes[roll]

def get_talent_category_piloting(roll):
    if roll not in talent_category_piloting_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_piloting_outcomes[roll]

def get_talent_category_weapons(roll):
    if roll not in talent_category_weapons_outcomes.keys():
        raise ValueError('Unsupported roll: {}'.format(roll))
    return talent_category_weapons_outcomes[roll]

def print_stats():
    print('')
    print('Physical Form: ' + (char_physical_form))
    print('Power Origin: ' + char_origin)
    print('Weakness Stimulus: ' + (char_weakness_stimulus))
    print('Weakness Effect: ' + (char_weakness_effect))
    print('Weakness Duration: ' + (char_weakness_duration))
    print('')
    print('Primary Abilities:')
    print('------------------')
    print('Fighting: ' + char_stats[0])
    print('Agility: ' + char_stats[1])
    print('Strength: ' + char_stats[2])
    print('Endurance: ' + char_stats[3])
    print('Reason: ' + char_stats[4])
    print('Intuition: ' + char_stats[5])
    print('Psyche: ' + char_stats[6])
    print('')
    print('Secondary Abilities:')
    print('--------------------')
    print('Health: ' + str(health))
    print('Karma: ' + str(karma))
    print('Resources: ' + char_resources)
    print('Popularity: ' + char_popularity)
    print('')
    print('Powers: ' + str(char_powers))
    print('-------')
    col_width = max(len(word) for row in char_powers_merged for word in row) + 2  # padding
    for row in char_powers_merged:
        print("".join(word.ljust(col_width) for word in row))
    print('')
    print('Talents: ' + str(char_talents))
    print('--------')
    print(*character_talents, sep = "\n")
    print('')
    print('Contacts: ' + str(char_contacts))
    print('')
    if len(character_bonuses) > 0:
        print('')
        print('Character Bonuses:')
        print('------------------')
        for item in character_bonuses:    
            print(item)
    if len (character_weaknesses) > 0:
        print('')
        print('Character Weaknesses:')
        print('------------------')
        for item in character_weaknesses:
            print(item)
    print('')
    print('')
    print('Thanks to Marvel for inspiring so many of us.  Excelsior!')
    print('')
    print('Marvel RPG info can be found at https://classicmarvelforever.com.')
    print('Program information can be found at https://ideasquantified.com.')

fase_dict = {}
rip_dict = {}
initial_rank_numbers = {
    'Feeble': 1,
    'Poor': 3,
    'Typical': 5,
    'Good': 8,
    'Excellent': 16,
    'Remarkable': 26,
    'Incredible': 36,
    'Amazing': 46,
    'Monstrous': 63
     }

#Generating Physical Form, Power Origin, Weaknesses, Resources, and Popularity
physical_form_roll = random.randint(1, 100)
char_physical_form = get_physical_form(physical_form_roll)
origin_roll = random.randint(1, 100)
char_origin = get_origin(origin_roll)
weakness_stimulus_roll = random.randint(1, 100)
char_weakness_stimulus = get_weakness_stimulus(weakness_stimulus_roll)
weakness_effect_roll = random.randint(1, 100)
char_weakness_effect = get_weakness_effect(weakness_effect_roll)
weakness_duration_roll = random.randint(1, 100)
char_weakness_duration = get_weakness_duration(weakness_duration_roll)

#FASERIP counter
for counter in range(1,8):
    if char_physical_form == 'Normal Human':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Mutant - Induced':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Mutant - Random':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Mutant - Breed':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Android':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Humanoid Race':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Surgical Composite':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Modified Human - Organic':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Modified Human - Muscular':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Modified Human - Skeletal':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Modified Human - Extra Parts':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Centaur':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Equiman':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank3(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Faun':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Felinoid':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Lupinoid':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Avian':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank3(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Chiropteran':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Lamian':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank3(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Merhuman':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Demihuman - Other':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Cyborg - Artifical Limbs and Organs':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Cyborg - Exoskeleton':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Cyborg - Mechanical Body':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Cyborg - Mechanically Augmented':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank3(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Robot - Human Shape':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Robot - Usuform':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Robot - Metamorphic':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Robot - Computer':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank4(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Angel or Demon':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Deity':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Animal':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Vegetable':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Abnormal Chemistry':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Mineral':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank2(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Gaseous':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Liquid':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Energy':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Ethereal':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Undead':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank1(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Compound':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    elif char_physical_form == 'Changeling':
        faserip_roll = random.randint(1, 100)
        char_faserip = get_faserip_rank5(faserip_roll)
        char_stats.append(char_faserip)
    else:
        print('Debug')

#Resources counter
for counter in range(1,2):
    if char_physical_form == 'Normal Human':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Mutant - Induced':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Mutant - Random':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Mutant - Breed':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Android':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Humanoid Race':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Surgical Composite':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Modified Human - Organic':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Modified Human - Muscular':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Modified Human - Skeletal':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Modified Human - Extra Parts':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Centaur':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Demihuman - Equiman':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Demihuman - Faun':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Felinoid':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Demihuman - Lupinoid':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Demihuman - Avian':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Demihuman - Chiropteran':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Lamian':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Demihuman - Merhuman':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Other':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Cyborg - Artifical Limbs and Organs':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Cyborg - Exoskeleton':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Cyborg - Mechanical Body':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Cyborg - Mechanically Augmented':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Robot - Human Shape':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Robot - Usuform':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Robot - Metamorphic':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Robot - Computer':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Angel or Demon':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Deity':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Animal':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Vegetable':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Abnormal Chemistry':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Mineral':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Gaseous':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Liquid':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Energy':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Ethereal':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Undead':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Compound':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Changeling':
        faserip_roll = random.randint(1, 100)
        char_resources = get_faserip_rank5(faserip_roll)
    else:
        print('Debug')

#Popularity counter
for counter in range(1,2):
    if char_physical_form == 'Normal Human':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Mutant - Induced':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Mutant - Random':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Mutant - Breed':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Android':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Humanoid Race':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Surgical Composite':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Modified Human - Organic':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Modified Human - Muscular':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Modified Human - Skeletal':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Modified Human - Extra Parts':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Centaur':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Demihuman - Equiman':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Demihuman - Faun':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Felinoid':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Demihuman - Lupinoid':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Demihuman - Avian':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Demihuman - Chiropteran':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Lamian':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Demihuman - Merhuman':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Demihuman - Other':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Cyborg - Artifical Limbs and Organs':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Cyborg - Exoskeleton':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Cyborg - Mechanical Body':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Cyborg - Mechanically Augmented':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank3(faserip_roll)
    elif char_physical_form == 'Robot - Human Shape':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Robot - Usuform':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Robot - Metamorphic':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Robot - Computer':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank4(faserip_roll)
    elif char_physical_form == 'Angel or Demon':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Deity':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Animal':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Vegetable':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Abnormal Chemistry':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Mineral':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank2(faserip_roll)
    elif char_physical_form == 'Gaseous':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Liquid':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Energy':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Ethereal':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Undead':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank1(faserip_roll)
    elif char_physical_form == 'Compound':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    elif char_physical_form == 'Changeling':
        faserip_roll = random.randint(1, 100)
        char_popularity = get_faserip_rank5(faserip_roll)
    else:
        print('Debug')

powers_roll = random.randint(1, 100)
char_powers = get_powers(powers_roll)
talents_roll = random.randint(1, 100)
char_talents = get_talents(talents_roll)
contacts_roll = random.randint(1, 100)
char_contacts = get_contacts(contacts_roll)

#Slice FASERIP
FASE = char_stats[0:4]
RIP = char_stats[4:7]

#Count FASERIP
for c in range(len(FASE)):
    fase_dict[FASE[c]] = FASE.count(
        FASE[c]
        )
for c in range(len(RIP)):
    rip_dict[RIP[c]] = RIP.count(
        RIP[c]
        )

fase_list = fase_dict.items()
rip_list = rip_dict.items()
health = 0
karma = 0

#Calculating Health via Tuple
FASE_tuple = tuple(FASE)
for k in (FASE_tuple):
    if k == 'Feeble':
        health = health + 1
    elif k == 'Poor':
        health = health + 3
    elif k == 'Typical':
        health = health + 5
    elif k == 'Good':
        health = health + 8
    elif k == 'Excellent':
        health = health + 16
    elif k == 'Remarkable':
        health = health + 26
    elif k == 'Incredible':
        health = health + 36
    elif k == 'Amazing':
        health = health + 46
    elif k == 'Monstrous':
        health = health + 63
    else:
        print('in progress')

#Calculating Karma via Tuple
RIP_tuple = tuple(RIP)
for k in (RIP_tuple):
    if k == 'Feeble':
        karma = karma + 1
    elif k == 'Poor':
        karma = karma + 3
    elif k == 'Typical':
        karma = karma + 5
    elif k == 'Good':
        karma = karma + 8
    elif k == 'Excellent':
        karma = karma + 16
    elif k == 'Remarkable':
        karma = karma + 26
    elif k == 'Incredible':
        karma = karma + 36
    elif k == 'Amazing':
        karma = karma + 46
    elif k == 'Monstrous':
        karma = karma + 63
    else:
        print('in progress')

#Generating Power Class and Categories
power_loop_count = 1
if char_physical_form == 'Mutant - Random':
    power_loop_count -= 1
elif char_physical_form == 'Android':
    power_loop_count -= 1
elif char_physical_form == 'Modified Human - Organic':
    power_loop_count += 1
elif char_physical_form == 'Modified Human - Muscular':
    power_loop_count += 1
elif char_physical_form == 'Modified Human - Skeletal':
    power_loop_count += 1
elif char_physical_form == 'Modified Human - Extra Parts':
    power_loop_count += 1
elif char_physical_form == 'Cyborg - Mechanically Augmented':
    power_loop_count += 1
elif char_physical_form == 'Deity':
    power_loop_count -= 2
elif char_physical_form == 'Animal':
    power_loop_count += 1

while power_loop_count <= char_powers:
    power_class_roll = random.randint(1, 100)
    power_class = get_power_class(power_class_roll)
    if power_class == 'Defensive':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_defensive(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Detection':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_detection(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Energy Control':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_energy_control(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Energy Emission':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_energy_emission(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Fighting':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_fighting_power(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Illusionary':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_illusory_power(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Lifeform Control':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_lifeform_contol(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Magic':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_magic(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Matter Control':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_matter_control(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Matter Conversion':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_matter_conversion(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Matter Creation':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_matter_creation(power_category_roll)
        if power not in character_powers:
            character_powers.append(power)
            power_loop_count += 1
    elif power_class == 'Mental Enhancement':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_mental_enhancement(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Physical Enhancement':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_mental_enhancement(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Power Control':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_power_control(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Self-Alteration':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_self_alteration(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    elif power_class == 'Travel':
        power_category_roll = random.randint(1, 100)
        power = get_power_category_mental_enhancement(power_category_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
    else:
        print('Debug')

#Generating Power Levels and Merging with Powers
while len(character_power_levels) < len(character_powers):
    power_level_roll = random.randint(1, 100)
    char_power_level = get_faserip_rank4(power_level_roll)
    character_power_levels.append(char_power_level)
    power_loop_count += 1
char_powers_merged = list(zip(character_powers, character_power_levels))

#Physical Form Modifiers
if char_physical_form == 'Normal Human':
    resources_mod = initial_ranks.index(char_resources)+1
    char_resources = initial_ranks[resources_mod]
elif char_physical_form == 'Mutant - Induced':
    character_bonuses.append('Raise any one primary ability +1 CS')
elif char_physical_form == 'Mutant - Random':
    endurance_mod = initial_ranks.index(char_stats[3])+1
    char_stats[3] = initial_ranks[endurance_mod]
    resources_mod = initial_ranks.index(char_resources)-1
    char_resources = initial_ranks[resources_mod]
elif char_physical_form == 'Mutant - Breed':
    endurance_mod = initial_ranks.index(char_stats[3])+1
    char_stats[3] = initial_ranks[endurance_mod]
    intuition_mod = initial_ranks.index(char_stats[6])+1
    char_stats[6] = initial_ranks[intuition_mod]
elif char_physical_form == 'Android':
    popularity_mod = initial_ranks.index(char_popularity)-1
    char_popularity = initial_ranks[popularity_mod]
    character_bonuses.append('Raise any one ability +1 CS')
elif char_physical_form == 'Humanoid Race':
    char_resources = 'Poor'
    char_contacts = 1
    character_bonuses.append('Raise any one ability +1 CS')
elif char_physical_form == 'Surgical Composite':
    char_resources = 'Poor'
    char_popularity = 'Zero'
    char_contacts = 1
    character_bonuses.append('Healing Rate: Twice Normal Human')
    character_weaknesses.append('Resistance: Mental Domination -1CS')
elif char_physical_form == 'Modified Human - Organic':
    character_bonuses.append('Healing Rate: Twice Normal Human')
elif char_physical_form == 'Modified Human - Muscular':
    strength_mod = initial_ranks.index(char_stats[2])+1
    char_stats[2] = initial_ranks[strength_mod]
    endurance_mod = initial_ranks.index(char_stats[3])+1
    char_stats[3] = initial_ranks[endurance_mod]
elif char_physical_form == 'Modified Human - Skeletal':
    character_bonuses.append('Resist: Physical Attacks +1 CS')
elif char_physical_form == 'Modified Human - Extra Parts':
    modified_human_chance = random.randint(1, 4)
    if modified_human_chance == 1:
        fighting_mod = initial_ranks.index(char_stats[0])+1
        char_stats[0] = initial_ranks[fighting_mod]
        character_bonuses.append('Extra Parts: Arms (Fighting)')
    elif modified_human_chance == 2:
        health = (health)*2
        character_bonuses.append('Extra Parts: Double Organs (Double Health)')
    elif modified_human_chance == 3:
        character_bonuses.append('Extra Parts: Tail (One Additional Blunt Attack')
    else:
        character_powers.append('Extra Parts: Wings (Flight)')
        power_level_roll = random.randint(1, 100)
        char_power_level = get_faserip_rank4(power_level_roll)
        character_power_levels.append(char_power_level)
        char_powers_merged = list(zip(character_powers, character_power_levels))      
elif char_physical_form == 'Demihuman - Centaur':
    strength_mod = initial_ranks.index(char_stats[2])+1
    char_stats[2] = initial_ranks[strength_mod]
    character_bonuses.append('Movement: 4 areas/turn if horizonal ground')
    character_weaknesses.append('Climbing: Feeble')
elif char_physical_form == 'Demihuman - Equiman':
    character_bonuses.append('Kicking: +1CS damage')
elif char_physical_form == 'Demihuman - Faun':
    char_popularity = 'Zero'
    character_bonuses.append('Mental Dominations: Feeble (On Females)')
elif char_physical_form == 'Demihuman - Felinoid':
    character_powers.append('Night Vision')
    character_power_levels.append('Excellent')
    char_powers_merged = list(zip(character_powers, character_power_levels))
    character_bonuses.append('Climbing: +1CS')
elif char_physical_form == 'Demihuman - Lupinoid':
    popularity_mod = initial_ranks.index(char_popularity)-1
    char_popularity = initial_ranks[popularity_mod]
    character_powers.append('Sense of Smell')
    character_power_levels.append('Excellent')
    char_powers_merged = list(zip(character_powers, character_power_levels))          
elif char_physical_form == 'Demihuman - Avian':
    avian_chance = random.randint(1, 2)
    if avian_chance == 1:
        popularity_mod = initial_ranks.index(char_popularity)+1
        char_popularity = initial_ranks[popularity_mod]
    else:
        fighting_mod = initial_ranks.index(char_stats[0])+1
        char_stats[0] = initial_ranks[fighting_mod]
elif char_physical_form == 'Demihuman - Chiropteran':
    character_powers.append('Sonar')
    character_power_levels.append('Good')
    char_powers_merged = list(zip(character_powers, character_power_levels))
    char_popularity = 'Feeble'
elif char_physical_form == 'Demihuman - Lamian':
    char_popularity = 'Zero'
    character_bonuses.append('Escape: +1CS')
    lamian_chance = random.randint(1, 2)
    if lamian_chance == 1:
        character_powers.append('Poison')
        character_power_levels.append('Excellent')
        char_powers_merged = list(zip(character_powers, character_power_levels))           
elif char_physical_form == 'Demihuman - Merhuman':
    popularity_mod = initial_ranks.index(char_popularity)+1
    char_popularity = initial_ranks[popularity_mod]
    character_powers.append('Water Freedom')
    power_level_roll = random.randint(1, 100)
    char_power_level = get_faserip_rank4(power_level_roll)
    character_power_levels.append(char_power_level)
    character_powers.append('Waterbreathing')
    power_level_roll = random.randint(1, 100)
    char_power_level = get_faserip_rank4(power_level_roll)
    character_power_levels.append(char_power_level)
    char_powers_merged = list(zip(character_powers, character_power_levels))
    character_weaknesses.append('Movement: Limited to crawling on land')
#elif char_physical_form = 'Demihuman - Other'
elif char_physical_form == 'Cyborg - Artifical Limbs and Organs':
    intuition_mod = initial_ranks.index(char_stats[5])-1
    char_stats[5] = initial_ranks[intuition_mod]
#elif char_physical_form = 'Cyborg - Exoskeleton'
elif char_physical_form == 'Cyborg - Mechanical Body':
    intuition_mod = initial_ranks.index(char_stats[5])-1
    char_stats[5] = initial_ranks[intuition_mod]
    psyche_mod = initial_ranks.index(char_stats[6])-1
    char_stats[6] = initial_ranks[psyche_mod]
    character_bonuses.append('Resist Disease: Monstrous')
    character_bonuses.append('Resist Poison: Monstrous')
    char_contacts = 1
#elif char_physical_form = 'Cyborg - Mechanically Augmented'
elif char_physical_form == 'Robot - Human Shape':
    char_popularity = 'Zero'
#elif char_physical_form == 'Robot - Usuform':
elif char_physical_form == 'Robot - Metamorphic':
    character_bonuses.append('Metamorphic Forms: 2')
elif char_physical_form == 'Robot - Computer':
    fighting_mod = initial_ranks.index(char_stats[0])-1
    char_stats[0] = initial_ranks[fighting_mod]
    reason_mod = initial_ranks.index(char_stats[4])+2
    char_stats[4] = initial_ranks[reason_mod]
    resources_mod = initial_ranks.index(char_resources)+1
    char_resources = initial_ranks[resources_mod]
elif char_physical_form == 'Angel or Demon':
    fighting_mod = initial_ranks.index(char_stats[0])+1
    char_stats[0] = initial_ranks[fighting_mod]
    agility_mod = initial_ranks.index(char_stats[1])+1
    char_stats[1] = initial_ranks[agility_mod]
    strength_mod = initial_ranks.index(char_stats[2])+1
    char_stats[2] = initial_ranks[strength_mod]
    endurance_mod = initial_ranks.index(char_stats[3])+1
    char_stats[3] = initial_ranks[endurance_mod]
    char_contacts = 0
    angel_chance = random.randint(1, 2)
    if angel_chance == 1:
        popularity_mod = initial_ranks.index(char_popularity)+2
        char_popularity = initial_ranks[popularity_mod]
        character_powers.append('Artifact Creation*')
        character_power_levels.append('Excellent')
        char_powers_merged = list(zip(character_powers, character_power_levels))
    else:
        popularity_mod = initial_ranks.index(char_popularity)-2
        char_popularity = initial_ranks[popularity_mod]
        character_powers.append('Fire Generation')
        character_power_levels.append('Good')
        char_powers_merged = list(zip(character_powers, character_power_levels))
        character_bonuses.append('Invulnerability: Heat and Fire')
elif char_physical_form == 'Deity':
    fighting_mod = initial_ranks.index(char_stats[0])+2
    char_stats[0] = initial_ranks[fighting_mod]
    agility_mod = initial_ranks.index(char_stats[1])+2
    char_stats[1] = initial_ranks[agility_mod]
    strength_mod = initial_ranks.index(char_stats[2])+2
    char_stats[2] = initial_ranks[strength_mod]
    endurance_mod = initial_ranks.index(char_stats[3])+2
    char_stats[3] = initial_ranks[endurance_mod]
    reason_mod = initial_ranks.index(char_stats[4])+2
    char_stats[4] = initial_ranks[reason_mod]
    intuition_mod = initial_ranks.index(char_stats[5])+2
    char_stats[5] = initial_ranks[intuition_mod]
    psyche_mod = initial_ranks.index(char_stats[6])+2
    char_stats[6] = initial_ranks[psyche_mod]
    popularity_mod = initial_ranks.index(char_popularity)+2
    char_popularity = initial_ranks[popularity_mod]
    power_loop_count = 0
    while power_loop_count <= 1:
        power_class_roll = random.randint(1, 100)
        power = get_power_category_travel(power_class_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
elif char_physical_form == 'Animal':
    char_resources = 'Zero'
    power_loop_count = 0
    while power_loop_count <= 2:
        power_class_roll = random.randint(1, 100)
        power = get_power_category_detection(power_class_roll)
        if power not in character_powers:
            if (power.find('*') != -1):
                character_powers.append(power)
                power_loop_count += 2
            else:
                character_powers.append(power)
                power_loop_count += 1
elif char_physical_form == 'Vegetable':
    fighting_mod = initial_ranks.index(char_stats[0])-2
    char_stats[0] = initial_ranks[fighting_mod]
    strength_mod = initial_ranks.index(char_stats[2])+1
    char_stats[2] = initial_ranks[strength_mod]
    endurance_mod = initial_ranks.index(char_stats[3])+2
    char_stats[3] = initial_ranks[endurance_mod]
    char_contacts = 0
    char_resources = 'Zero'
    character_powers.append('Absorption (Photosynthesis)')
    character_power_levels.append('Good')
    char_powers_merged = list(zip(character_powers, character_power_levels))
    character_weaknesses.append('Requirement: Light and water or -1 CS strength and endurance per day starting after 3 days')
elif char_physical_form == 'Abnormal Chemistry':
    endurance_mod = initial_ranks.index(char_stats[3])+1
    char_stats[3] = initial_ranks[endurance_mod]
elif char_physical_form == 'Mineral':
    health = (health)*2
    character_bonuses.append('Resist: Poison (that hurts humans)')
    character_bonuses.append('Resist: Disease (that hurts humans)')
    character_weaknesses.append('Vulnerability: Poison (that hurts minerals')
    character_weaknesses.append('Vulnerability: Disease (that hurts minerals')
    character_weaknesses.append('Movement: -1CS')
elif char_physical_form == 'Gaseous':
    char_contacts = 0
    char_resources = 'Zero'
    character_bonuses.append('Movement: Phasing solid materials')
elif char_physical_form == 'Liquid':
    character_bonuses.append('Movement: Phasing porous materials')
    if initial_ranks.index(char_stats[3]) > 4:
        if initial_ranks.index(char_stats[6]) > 4:
            character_bonuses.append('Movement: Can form human body and walk')
elif char_physical_form == 'Energy':
    character_weaknesses.append('Resist: Plasma Control -1CS')
    character_bonuses.append('Physical Contact: Feeble Damage')
    power_category_roll = random.randint(1, 100)
    power = get_power_category_energy_emission(power_category_roll)
    power_level_roll = random.randint(1, 100)
    char_power_level = get_faserip_rank4(power_level_roll)
    if power not in character_powers:
        character_powers.append(power)
        character_power_levels.append(char_power_level)
        char_powers_merged = list(zip(character_powers, character_power_levels))
elif char_physical_form == 'Ethereal':
    character_bonuses.append('Resist: Physical Attacks -9CS')
    character_weaknesses.append('Vulnerability: Magic Attacks')
    character_weaknesses.append('Vulnerability: Mental Attacks')
elif char_physical_form == 'Undead':
    strength_mod = initial_ranks.index(char_stats[2])+1
    char_stats[2] = initial_ranks[strength_mod]
    endurance_mod = initial_ranks.index(char_stats[3])+1
    char_stats[3] = initial_ranks[endurance_mod]
    character_weaknesses.append('Psychological: Religious Symbols')
elif char_physical_form == 'Compound':
    compound_chance = random.randint(1, 100)
    if compound_chance <51:
        character_bonuses.append('Compound Forms: 2')
    elif compound_chance <76:
        character_bonuses.append('Compound Forms: 3')
    elif compound_chance <96:
        character_bonuses.append('Compound Forms: 4')
    else:
        character_bonuses.append('Compound Forms: 5')
    popularity_mod = initial_ranks.index(char_popularity)-1
    char_popularity = initial_ranks[popularity_mod]
elif char_physical_form == 'Changeling':
    changeling_chance = random.randint(1, 100)
    if changeling_chance <51:
        character_bonuses.append('Changeling Forms: 2')
    elif changeling_chance <76:
        character_bonuses.append('Changeling Forms: 3')
    elif changeling_chance <96:
        character_bonuses.append('Changeling Forms: 4')
    else:
        character_bonuses.append('Changeling Forms: 5')

#Generating Talents
talent_loop_count = 1
talents_roll = random.randint(1, 100)
char_talents = get_talents(talents_roll)
while talent_loop_count <= char_talents:
    talent_category_roll = random.randint(1, 100)
    talent_category = get_talent_category(talent_category_roll)
    if talent_category == 'Alternative Sciences':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_alternative_sciences(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Astronomy':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_astronomy(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Biology':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_biology(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Chemistry':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_chemistry(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Crime and Law':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_crime_and_law(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Cognitive Sciences and Humanities':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_cognitive_sciences(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Computer Science':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_computer_science(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Earth Science':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_earth_science(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Engineering':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_engineering(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Fighting Skills':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_fighting_skills(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Medicine':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_medicine(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Mystic and Mental':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_mystic_and_mental(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Other':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_other(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Physics':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_physics(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Piloting':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_piloting(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1
    elif talent_category == 'Weapons':
        talent_roll = random.randint(1, 100)
        talent = get_talent_category_weapons(talent_roll)
        if talent not in character_powers:
            character_talents.append(talent)
            talent_loop_count += 1

  
#Show and Tell Time
print('Begin the Character Creation Process!')
print('Generating Origins...')
print('You are ... ')
time.sleep(1)
print_stats()
print()
print('')
